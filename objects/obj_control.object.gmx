<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collision32</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_3dObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// Objects
//instance_create(0, 0, obj_discord);
instance_create(room_width/2, room_height/2, obj_1stPersonCamera);

// Floor
z = 0;
height = 256;
image_xscale = room_width/sprite_get_width(sprite_index);
image_yscale = room_height/sprite_get_height(sprite_index);
floorScale = 512; // how big the floor texture should be drawn

// Skybox
skyboxRadius = 64000; // radius of the skybox

// Options
cameraMode = 0; // 0 = menu / 1 = garage / 2 = first person / 3 = third person
menuState = 0; // 0 = main menu / 1 = options / 2 = resolution / 3 = garage
clickDelay = 5;
clickDELAY = 5;

fullScreen = false;
gamePaused  = false;
playSound = false;
playerExists = false;
debugMode = true;
freecam = false;

// Camera
window_set_size(1280, 720);
display_set_gui_maximise();

//Vars
obj = obj_1stPersonCamera;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game control

keybinds();

// Create player
if(cameraMode = 2 &amp;&amp; room != rm_menu &amp;&amp; !gamePaused &amp;&amp; !playerExists)
{
    instance_create(room_width/2, room_height/2, obj_player);
    playerExists = true;
}

// Create free camera
if(cameraMode = 3 &amp;&amp; room != rm_menu &amp;&amp; !gamePaused &amp;&amp; !playerExists)
{   
    instance_create(room_width/2, room_height/2, obj_1stPersonCamera);
    playerExists = true;
}

// Pause
if(escapeKey)
{
    gamePaused = !gamePaused;
}

// Fullscreen
if(xKey)
{
    fullScreen = !fullScreen;
}
    
if(fullScreen)
{
    window_set_fullscreen(true);
}else{
    window_set_fullscreen(false);
}

// Cursor visibility
if(tabKeyHold || gamePaused || cameraMode == 0 || (cameraMode == 1 &amp;&amp; !mouseRightHold))
{
    window_set_cursor(cr_default);
}else{
    window_set_cursor(cr_none);
}

// Debug mode
if(debugMode)
{
    show_debug_overlay(true);
    random_set_seed(1);
}else{
    show_debug_overlay(false);
    randomize();
}

// Click delay
clickDelay--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

audio_stop_all();
image_xscale = room_width/sprite_get_width(sprite_index);
image_yscale = room_height/sprite_get_height(sprite_index);

// Use 'noone' for no floor

switch(room)
{
    case rm_menu:
    var spriteFloor = tex_retro;
    var spriteSkybox = sky_space;
    audio_play_sound_ext(msc_retro, 1, true);
    break;
}

if(spriteFloor != noone)
{
    image_xscale = room_width/sprite_get_width(sprite_index);
    image_yscale = room_height/sprite_get_height(sprite_index);
    texFloor = sprite_get_texture(spriteFloor, image_index); // the texture to be used
}else{
    image_xscale = 0;
    image_yscale = 0;
    texFloor = noone;
}

texSkybox = sprite_get_texture(spriteSkybox, image_index); // the texture to be used
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Overlay

/*if(room = rm_lvlCityNight)
{
    draw_set_alpha(.35);
    draw_set_color(make_colour_rgb(10, 0, 41));
    draw_rectangle(0, 0, window_get_width(), window_get_height(), false);
    draw_set_alpha(1);
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start menu

/*var centerX = view_wport[0]/2;
var centerY = view_hport[0]/2;
var offset = 100;

// -----------------------------------------------------------------------------------------------

// Start menu
if(!gamePaused &amp;&amp; cameraMode == 0 &amp;&amp; menuState == 0)
{   
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5); 
    
    // Start game
    if(draw_button_ui(300, centerY-offset, "START GAME", 0, 1))
    {
        menuState = 3;
        cameraMode = 1;
    }
    
    // Options
    if(draw_button_ui(300, centerY, "OPTIONS", 0, 1))
        then menuState = 1;
        
    // Quit game
    if(draw_button_ui(300, centerY+offset, "QUIT GAME", 0, 1))
        then game_end();
}

// -----------------------------------------------------------------------------------------------
    
// Options
if(!gamePaused &amp;&amp; cameraMode == 0 &amp;&amp; menuState == 1)
{
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5);
    draw_rectangle_ui(800, 15, "FULLSCREEN", offset*2, c_black, .5);
    draw_rectangle_ui(1300, 15, "0000 X 0000", offset*2, c_black, .5);

    // Options
    draw_button_ui(300, centerY, "OPTIONS", 0, 1)
    
    // Back
    if(draw_button_ui(300, centerY+offset, "BACK", 0, 1))
        then menuState = 0;
    
    // Fullscreen
    if(draw_button_ui(800, centerY-offset*1.5, "FULLSCREEN", 0, 1))
        then fullScreen = !fullScreen;
    
    // Resolution
    if(draw_button_ui(800, centerY-offset*0.5, "RESOLUTION", 0, 1))
        then menuState = 2;
        
    // Sound
    if(draw_button_ui(800, centerY+offset*0.5, "SOUND", 0, 1))
    {   
        playSound = !playSound;
        if(!playSound)
            then audio_pause_all();
        if(playSound)
            then audio_resume_all();
    }
    
    // Debug mode
    if (draw_button_ui(800, centerY+offset*1.5, "DEBUG", 0, 1))
        then debugMode = !debugMode;
    
    // Setting states    
    if(fullScreen)
    {
        draw_text_ui(1300, centerY-offset*1.5, "ON", 1, false);
    }else{
        draw_text_ui(1300, centerY-offset*1.5, "OFF", 1, false);
    }
    
    if(window_get_height() == 1071)
    {
        draw_text_ui(1300, centerY-offset*0.5, string(window_get_width())+" X 1080", 1, false);
    }else{
        draw_text_ui(1300, centerY-offset*0.5, string(window_get_width())+" X "+string(window_get_height()), 1, false);
    }
        
    if(playSound)
    {
        draw_text_ui(1300, centerY+offset*0.5, "ON", 1, false);
    }else{
        draw_text_ui(1300, centerY+offset*0.5, "OFF", 1, false);
    }
    
    if(debugMode)
    {
        draw_text_ui(1300, centerY+offset*1.5, "ON", 1, false);
    }else{
        draw_text_ui(1300, centerY+offset*1.5, "OFF", 1, false);
    }
}

// -----------------------------------------------------------------------------------------------

// Resolution settings
if(!gamePaused &amp;&amp; cameraMode == 0 &amp;&amp; menuState == 2)
{
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5);
    draw_rectangle_ui(800, 15, "FULLSCREEN", offset*2, c_black, .5);
    draw_rectangle_ui(1300, 15, "0000 X 0000", offset*2.5, c_black, .5);
    
    // Options
    if(draw_button_ui(300, centerY, "OPTIONS", 0, 1))
        then menuState = 1;
        
    // Back
    if(draw_button_ui(300, centerY+offset, "BACK", 0, 1))
        then menuState = 1;
        
    // Resolution
    draw_button_ui(800, centerY, "RESOLUTION", 0, 1)
    
    if(draw_button_ui(1300, centerY-offset*2, "640 X 360", 0, 1))
        then window_set_size(640, 360);
    
    if(draw_button_ui(1300, centerY-offset, "1280 X 720", 0, 1))
        then window_set_size(1280, 720);
    
    if(draw_button_ui(1300, centerY, "1366 X 768", 0, 1))
        then window_set_size(1366, 768);
    
    if(draw_button_ui(1300, centerY+offset, "1920 X 1080", 0, 1))
        then window_set_size(1920, 1080);
    
    if(draw_button_ui(1300, centerY+offset*2, "2560 X 1440", 0, 1) &amp;&amp; display_get_width() &gt;= 2560 &amp;&amp; display_get_height() &gt;= 1440)
        then window_set_size(2560, 1440);
        
    window_center();
    display_set_gui_maximise();
}

// -----------------------------------------------------------------------------------------------

// Vehicle select
if(!gamePaused &amp;&amp; cameraMode == 1 &amp;&amp; menuState == 3)
{
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5);

    // Start
    if(draw_button_ui(300, centerY-offset, "START", 0, 1))
    {
        menuState = 4;
        cameraMode = 0;  
    }
    
    // Freecam
    if(draw_button_ui(300, centerY, "FREECAM", 0, 1))
    {
        menuState = 4;
        cameraMode = 0;
        freecam = true;
    }
    
    // Back
    if(draw_button_ui(300, centerY+offset, "BACK", 0, 1))
    {
        menuState = 0;
        cameraMode = 0;
    }
    
    // Change model &amp; tetxure
    if(draw_button_ui(centerX+400, centerY+offset, "--)", 0, 1))
        then garageModel++;
        
    if(draw_button_ui(centerX-400, centerY+offset, "(--", 0, 1))
        then garageModel--;
        
    if(draw_button_ui(centerX+400, centerY-offset, "--)", 0, 1))
        then garageTexture++;
        
    if(draw_button_ui(centerX-400, centerY-offset, "(--", 0, 1))
        then garageTexture--;
}

// -----------------------------------------------------------------------------------------------

// Level select
if(!gamePaused &amp;&amp; cameraMode == 0 &amp;&amp; menuState == 4)
{
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5);
    
    // Back
    if(draw_button_ui(300, centerY+offset, "BACK", 0, 1))
    {
        menuState = 3;
        cameraMode = 1;
    }
    
    // Level
    if(draw_image_ui(900, 400, spr_buttonRetro, 0, 1))
    {
        room_goto(rm_lvlRetro);
        if(freecam)
        {
            cameraMode = 3;
        }else{
            cameraMode = 2;
        }
    }
    
    if(draw_image_ui(1500, 400, spr_buttonRetro, 0, 1))
    {
        room_goto(rm_lvlRicardo);
        if(freecam)
        {
            cameraMode = 3;
        }else{
            cameraMode = 2;
        }
    }
    
    if(draw_image_ui(900, 700, spr_buttonRetro, 0, 1))
    {
        room_goto(rm_lvlCityDay);
        if(freecam)
        {
            cameraMode = 3;
        }else{
            cameraMode = 2;
        }
    }
      
}


if(!gamePaused &amp;&amp; (cameraMode == 0 || cameraMode == 1))
{
    draw_text_ui(300, 130, "Big Rigs 2", 1.2, false);
    draw_text_ui(300, 240, "ULTIMATE", 1.2, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause menu

/*if(gamePaused)
{
    draw_rectangle_ui(300, 15, "START GAME", 0, c_black, .5);
    
    // Continue
    if (draw_button_ui(300, centerY-offset*1.5, "CONTINUE", 0, 1))
        then gamePaused = !gamePaused;
    
    // Restart  
    if (draw_button_ui(300, centerY-offset*0.5, "RESTART", 0, 1))
        then game_restart();
    
    // End game    
    if (draw_button_ui(300, centerY+offset*0.5, "END GAME", 0, 1))
        then game_end();
    
    // Fullscreen    
    if (draw_button_ui(300, centerY+offset*1.5, "FULLSCREEN", 0, 1))
        then fullScreen = !fullScreen;
}

if(gamePaused)
{
    draw_text_ui(300, 130, "Big Rigs 2", 1.2, false);
    draw_text_ui(300, 240, "ULTIMATE", 1.2, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if(debugMode)
{
    draw_text_ui(1800, 50, string(device_mouse_x_to_gui(0)), 1, false);
    draw_text_ui(1800, 100, string(device_mouse_y_to_gui(0)), 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Floor &amp; skybox

// Floor
var hRepeat = room_width/floorScale;
var vRepeat = room_height/floorScale;

if(texFloor != noone)
{
    d3d_draw_block(0, 0, 0, room_width, room_height, -128, texFloor, hRepeat, vRepeat);
}

// Skybox
if(instance_exists(obj))
{
    var xx = obj.x;
    var yy = obj.y;
}

if(instance_exists(obj_1stPersonCamera))
{
    var xx = obj_1stPersonCamera.x;
    var yy = obj_1stPersonCamera.y;
}


if(instance_exists(obj))
{
    d3d_transform_set_identity();
    d3d_transform_add_translation(xx,yy,0);
    d3d_draw_ellipsoid(-skyboxRadius, -skyboxRadius, -skyboxRadius, skyboxRadius, skyboxRadius, skyboxRadius, texSkybox, 1, 1, 100);
    d3d_transform_set_identity();
}

//d3d_set_fog(true, make_colour_rgb(116, 36, 138), 4000, 100000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
